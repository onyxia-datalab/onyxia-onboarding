// Code generated by ogen, DO NOT EDIT.

package api

type Oidc struct {
	Token  string
	Scopes []string
}

// GetToken returns the value of Token.
func (s *Oidc) GetToken() string {
	return s.Token
}

// GetScopes returns the value of Scopes.
func (s *Oidc) GetScopes() []string {
	return s.Scopes
}

// SetToken sets the value of Token.
func (s *Oidc) SetToken(val string) {
	s.Token = val
}

// SetScopes sets the value of Scopes.
func (s *Oidc) SetScopes(val []string) {
	s.Scopes = val
}

// OnboardForbidden is response for Onboard operation.
type OnboardForbidden struct{}

func (*OnboardForbidden) onboardRes() {}

// OnboardOK is response for Onboard operation.
type OnboardOK struct{}

func (*OnboardOK) onboardRes() {}

// OnboardUnauthorized is response for Onboard operation.
type OnboardUnauthorized struct{}

func (*OnboardUnauthorized) onboardRes() {}

// Specification on which namespace to create.
// Ref: #/components/schemas/OnboardingRequest
type OnboardingRequest struct {
	Group OptString `json:"group"`
}

// GetGroup returns the value of Group.
func (s *OnboardingRequest) GetGroup() OptString {
	return s.Group
}

// SetGroup sets the value of Group.
func (s *OnboardingRequest) SetGroup(val OptString) {
	s.Group = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
